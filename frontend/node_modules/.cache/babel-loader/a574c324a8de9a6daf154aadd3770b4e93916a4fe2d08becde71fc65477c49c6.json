{"ast":null,"code":"//Rest APIs for user authentication and registration\n\nimport jwt_decode from \"jwt-decode\";\nexport const doLogin = (email, password) => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('http://localhost:8080/api/auth/signin', {\n    method: 'POST',\n    body: JSON.stringify({\n      username: email,\n      password: password\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  }).then(response => {\n    response.json().then(json => {\n      if (response.ok) {\n        console.log(response.headers);\n        let token = response.headers.get(\"Set-Cookie\");\n        console.log(token);\n        //let token = json.token;\n        let decoded = jwt_decode(token);\n        console.log(decoded);\n        promiseResolveRef({\n          username: json.email,\n          accessToken: token,\n          accessTokenTimeout: decoded.exp * 1000,\n          //convert to epoch\n          roles: json.roles,\n          userId: json.userId,\n          response: response\n        });\n      } else {\n        promiseRejectRef({\n          reason: \"Server error occurred. Please try again.\",\n          response: response\n        });\n      }\n    }).catch(error => {\n      promiseRejectRef({\n        reason: \"Bad Credentials. Please try again.\",\n        response: error\n      });\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Some error occurred. Please try again.\",\n      response: err\n    });\n  });\n  return promise;\n};\nexport const doSignup = requestJson => {\n  //Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n  //caller of the function should only be concerned with returned data on success or failure message\n  let promiseResolveRef = null;\n  let promiseRejectRef = null;\n  let promise = new Promise((resolve, reject) => {\n    promiseResolveRef = resolve;\n    promiseRejectRef = reject;\n  });\n  fetch('http://localhost:8080/api/auth/signup', {\n    method: 'POST',\n    body: JSON.stringify(requestJson),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8'\n    }\n  }).then(response => {\n    response.json().then(json => {\n      if (response.ok) {\n        promiseResolveRef({\n          message: json.message,\n          response: response\n        });\n      } else {\n        let message = json.message;\n        if (message === undefined || message === null) {\n          message = \"Server error occurred. Please try again.\";\n        }\n        promiseRejectRef({\n          reason: message,\n          response: response\n        });\n      }\n    }).catch(err => {\n      promiseRejectRef({\n        reason: \"Some error occurred. Please try again.\",\n        response: err\n      });\n    });\n  }).catch(err => {\n    promiseRejectRef({\n      reason: \"Some error occurred. Please try again.\",\n      response: err\n    });\n  });\n  return promise;\n};","map":{"version":3,"names":["jwt_decode","doLogin","email","password","promiseResolveRef","promiseRejectRef","promise","Promise","resolve","reject","fetch","method","body","JSON","stringify","username","headers","then","response","json","ok","console","log","token","get","decoded","accessToken","accessTokenTimeout","exp","roles","userId","reason","catch","error","err","doSignup","requestJson","message","undefined"],"sources":["C:/Users/Home/Documents/UpGrad-Project/upgrad-eshop/frontend/src/api/userAuthAPIs.js"],"sourcesContent":["//Rest APIs for user authentication and registration\n\nimport jwt_decode from \"jwt-decode\";\n\nexport const doLogin = (email, password) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('http://localhost:8080/api/auth/signin', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n\t\t\tusername: email,\n\t\t\tpassword: password,\n\t\t}),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t},\n\t}).then((response) => {\n\t\tresponse.json().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tconsole.log(response.headers);\n\t\t\t\tlet token = response.headers.get(\"Set-Cookie\");\n\t\t\t\tconsole.log(token);\n\t\t\t\t//let token = json.token;\n\t\t\t\tlet decoded = jwt_decode(token);\n\t\t\t\tconsole.log(decoded);\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tusername: json.email,\n\t\t\t\t\taccessToken: token,\n\t\t\t\t\taccessTokenTimeout: decoded.exp * 1000, //convert to epoch\n\t\t\t\t\troles: json.roles,\n\t\t\t\t\tuserId: json.userId,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Server error occurred. Please try again.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t}).catch((error) => {\n\t\t\tpromiseRejectRef({\n\t\t\t\treason: \"Bad Credentials. Please try again.\",\n\t\t\t\tresponse: error,\n\t\t\t});\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const doSignup = (requestJson) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\t\n\tfetch('http://localhost:8080/api/auth/signup', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(requestJson),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t},\n\t}).then((response) => {\n\t\tresponse.json().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tmessage: json.message,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet message = json.message;\n\t\t\t\tif(message === undefined || message === null) {\n\t\t\t\t\tmessage = \"Server error occurred. Please try again.\";\n\t\t\t\t}\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: message,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t}).catch((err) => {\n\t\t\tpromiseRejectRef({\n\t\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\t\tresponse: err,\n\t\t\t});\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}