{"ast":null,"code":"//Rest APIs for product\nexport var fetchAllProducts=function fetchAllProducts(accessToken){//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n//caller of the function should only be concerned with returned data on success or failure message\nvar promiseResolveRef=null;var promiseRejectRef=null;var promise=new Promise(function(resolve,reject){promiseResolveRef=resolve;promiseRejectRef=reject;});fetch('http://localhost:8080/api/products',{method:'GET',headers:{'x-auth-token':accessToken}}).then(function(response){response.json().then(function(json){if(response.ok){promiseResolveRef({data:json,response:response});}else{promiseRejectRef({reason:\"Server error occurred.\",response:response});}});}).catch(function(err){promiseRejectRef({reason:\"Some error occurred.\",response:err});});return promise;};export var createProduct=function createProduct(requestJson,accessToken){//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n//caller of the function should only be concerned with returned data on success or failure message\nvar promiseResolveRef=null;var promiseRejectRef=null;var promise=new Promise(function(resolve,reject){promiseResolveRef=resolve;promiseRejectRef=reject;});fetch('http://localhost:8080/api/products',{method:'POST',body:JSON.stringify(requestJson),headers:{'Content-type':'application/json; charset=UTF-8','x-auth-token':accessToken}}).then(function(response){response.text().then(function(json){if(response.ok){promiseResolveRef({message:\"Product \"+requestJson.name+\" added successfully.\",response:response});}else{var message=json.message;if(message===undefined||message===null){message=\"Server error occurred. Please try again.\";}promiseRejectRef({reason:message,response:response});}});}).catch(function(err){promiseRejectRef({reason:\"Some error occurred. Please try again.\",response:err});});return promise;};export var deleteProduct=function deleteProduct(id,accessToken){//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n//caller of the function should only be concerned with returned data on success or failure message\nvar promiseResolveRef=null;var promiseRejectRef=null;var promise=new Promise(function(resolve,reject){promiseResolveRef=resolve;promiseRejectRef=reject;});fetch('http://localhost:8080/api/products/'+id,{method:'DELETE',headers:{'x-auth-token':accessToken}}).then(function(response){response.text().then(function(){if(response.ok){promiseResolveRef({response:response});}else{promiseRejectRef({reason:\"Server error occurred.\",response:response});}});}).catch(function(err){promiseRejectRef({reason:\"Some error occurred.\",response:err});});return promise;};export var modifyProduct=function modifyProduct(requestJson,accessToken){//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n//caller of the function should only be concerned with returned data on success or failure message\nvar promiseResolveRef=null;var promiseRejectRef=null;var promise=new Promise(function(resolve,reject){promiseResolveRef=resolve;promiseRejectRef=reject;});fetch('http://localhost:8080/api/products/'+requestJson.id,{method:'PUT',body:JSON.stringify(requestJson),headers:{'Content-type':'application/json; charset=UTF-8','x-auth-token':accessToken}}).then(function(response){response.text().then(function(json){if(response.ok){promiseResolveRef({message:\"Product \"+requestJson.name+\" modified successfully.\",response:response});}else{var message=json.message;if(message===undefined||message===null){message=\"Server error occurred. Please try again.\";}promiseRejectRef({reason:message,response:response});}});}).catch(function(err){promiseRejectRef({reason:\"Some error occurred. Please try again.\",response:err});});return promise;};export var viewProduct=function viewProduct(id,accessToken){//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n//caller of the function should only be concerned with returned data on success or failure message\nvar promiseResolveRef=null;var promiseRejectRef=null;var promise=new Promise(function(resolve,reject){promiseResolveRef=resolve;promiseRejectRef=reject;});fetch('http://localhost:8080/api/products/'+id,{method:'GET',headers:{'x-auth-token':accessToken}}).then(function(response){response.json().then(function(json){if(response.ok){promiseResolveRef({value:json,response:response});}else{promiseRejectRef({reason:\"Server error occurred.\",response:response});}});}).catch(function(err){promiseRejectRef({reason:\"Some error occurred.\",response:err});});return promise;};","map":{"version":3,"names":["fetchAllProducts","accessToken","promiseResolveRef","promiseRejectRef","promise","Promise","resolve","reject","fetch","method","headers","then","response","json","ok","data","reason","catch","err","createProduct","requestJson","body","JSON","stringify","text","message","name","undefined","deleteProduct","id","modifyProduct","viewProduct","value"],"sources":["C:/Users/Home/Documents/UpGrad-Project/upgrad-eshop/frontend/src/api/productAPIs.js"],"sourcesContent":["//Rest APIs for product\n\nexport const fetchAllProducts = (accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('http://localhost:8080/api/products', {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.json().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tdata: json,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Server error occurred.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const createProduct = (requestJson, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('http://localhost:8080/api/products', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(requestJson),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tmessage: \"Product \" + requestJson.name + \" added successfully.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet message = json.message;\n\t\t\t\tif(message === undefined || message === null) {\n\t\t\t\t\tmessage = \"Server error occurred. Please try again.\";\n\t\t\t\t}\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: message,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const deleteProduct = (id, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('http://localhost:8080/api/products/'+id, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then(() => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Server error occurred.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const modifyProduct = (requestJson, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('http://localhost:8080/api/products/' + requestJson.id, {\n\t\tmethod: 'PUT',\n\t\tbody: JSON.stringify(requestJson),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tmessage: \"Product \" + requestJson.name + \" modified successfully.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet message = json.message;\n\t\t\t\tif(message === undefined || message === null) {\n\t\t\t\t\tmessage = \"Server error occurred. Please try again.\";\n\t\t\t\t}\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: message,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};\n\nexport const viewProduct = (id, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('http://localhost:8080/api/products/'+id, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.json().then((json) => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tvalue: json,\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Server error occurred.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Some error occurred.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}