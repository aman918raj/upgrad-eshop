{"ast":null,"code":"//Rest APIs for order\nexport var createOrder=function createOrder(requestJson,accessToken){//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n//caller of the function should only be concerned with returned data on success or failure message\nvar promiseResolveRef=null;var promiseRejectRef=null;var promise=new Promise(function(resolve,reject){promiseResolveRef=resolve;promiseRejectRef=reject;});fetch('http://localhost:8080/api/orders',{method:'POST',body:JSON.stringify(requestJson),headers:{'Content-type':'application/json; charset=UTF-8','x-auth-token':accessToken}}).then(function(response){response.text().then(function(){if(response.ok){promiseResolveRef({response:response});}else{promiseRejectRef({reason:\"Some error occurred. Please try again.\",response:response});}});}).catch(function(err){promiseRejectRef({reason:\"Server error occurred. Please try again.\",response:err});});return promise;};","map":{"version":3,"names":["createOrder","requestJson","accessToken","promiseResolveRef","promiseRejectRef","promise","Promise","resolve","reject","fetch","method","body","JSON","stringify","headers","then","response","text","ok","reason","catch","err"],"sources":["C:/Users/Home/Documents/UpGrad-Project/upgrad-eshop/frontend/src/api/orderAPIs.js"],"sourcesContent":["//Rest APIs for order\n\nexport const createOrder = (requestJson, accessToken) => {\n\t//Note: we are returning promise so that we can resolve it by using appropriate data type like json or text\n\t//caller of the function should only be concerned with returned data on success or failure message\n\tlet promiseResolveRef = null;\n\tlet promiseRejectRef = null;\n\tlet promise = new Promise((resolve, reject) => {\n\t\tpromiseResolveRef = resolve;\n\t\tpromiseRejectRef = reject;\n\t});\n\tfetch('http://localhost:8080/api/orders', {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(requestJson),\n\t\theaders: {\n\t\t\t'Content-type': 'application/json; charset=UTF-8',\n\t\t\t'x-auth-token': accessToken,\n\t\t},\n\t}).then((response) => {\n\t\tresponse.text().then(() => {\n\t\t\tif(response.ok) {\n\t\t\t\tpromiseResolveRef({\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpromiseRejectRef({\n\t\t\t\t\treason: \"Some error occurred. Please try again.\",\n\t\t\t\t\tresponse: response,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}).catch((err) => {\n\t\tpromiseRejectRef({\n\t\t\treason: \"Server error occurred. Please try again.\",\n\t\t\tresponse: err,\n\t\t});\n\t});\n\treturn promise;\n};"],"mappings":"AAAA;AAEA,MAAO,IAAM,CAAAA,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,WAAW,CAAEC,WAAW,CAAK,CACxD;AACA;AACA,GAAI,CAAAC,iBAAiB,CAAG,IAAI,CAC5B,GAAI,CAAAC,gBAAgB,CAAG,IAAI,CAC3B,GAAI,CAAAC,OAAO,CAAG,GAAI,CAAAC,OAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK,CAC9CL,iBAAiB,CAAGI,OAAO,CAC3BH,gBAAgB,CAAGI,MAAM,CAC1B,CAAC,CAAC,CACFC,KAAK,CAAC,kCAAkC,CAAE,CACzCC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACZ,WAAW,CAAC,CACjCa,OAAO,CAAE,CACR,cAAc,CAAE,iCAAiC,CACjD,cAAc,CAAEZ,WACjB,CACD,CAAC,CAAC,CAACa,IAAI,CAAC,SAACC,QAAQ,CAAK,CACrBA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACF,IAAI,CAAC,UAAM,CAC1B,GAAGC,QAAQ,CAACE,EAAE,CAAE,CACff,iBAAiB,CAAC,CACjBa,QAAQ,CAAEA,QACX,CAAC,CAAC,CACH,CAAC,IAAM,CACNZ,gBAAgB,CAAC,CAChBe,MAAM,CAAE,wCAAwC,CAChDH,QAAQ,CAAEA,QACX,CAAC,CAAC,CACH,CACD,CAAC,CAAC,CACH,CAAC,CAAC,CAACI,KAAK,CAAC,SAACC,GAAG,CAAK,CACjBjB,gBAAgB,CAAC,CAChBe,MAAM,CAAE,0CAA0C,CAClDH,QAAQ,CAAEK,GACX,CAAC,CAAC,CACH,CAAC,CAAC,CACF,MAAO,CAAAhB,OAAO,CACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}